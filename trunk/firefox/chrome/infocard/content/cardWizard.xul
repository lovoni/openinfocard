<?xml version="1.0"?>
<!--
/*
 * Copyright (c) 2006, Chuck Mortimore - charliemortimore at gmail.com
 * xmldap.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the names xmldap, xmldap.org, xmldap.com nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<!DOCTYPE window [
 <!ENTITY % cardmanagerDTD SYSTEM "chrome://infocard/locale/cardmanager.dtd" >
 %cardmanagerDTD;
 <!ENTITY % cardwizardDTD SYSTEM "chrome://infocard/locale/cardwizard.dtd" >
 %cardwizardDTD;
]>
<wizard id="card-window" title="&cardwizard.title;" onwizardfinish=""
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <stringbundleset id="stringbundleset">
     <stringbundle id="string-bundle" src="chrome://infocard/locale/infocards.properties"/>
    </stringbundleset>

  <script src="chrome://infocard/content/infocards.js"/>

  <wizardpage pageid="type" onpageadvanced="next();">

      <script>

           function next() {

             var menu = document.getElementById('cardType');
             var selectedItem = menu.selectedItem;
             var value = selectedItem.getAttribute('value');

             document.getElementById('card-window').goTo(value);
             document.getElementById('type').advance(value);
             return false;

          }




       </script>

    <description>
    &cardwizard.first;
    </description>
    <label value="&cardwizard.selectatypeofcard;"/>
    <menulist id="cardType">
      <menupopup>
        <menuitem label="&cardwizard.selfasserted;" value="selfAsserted"/>
        <menuitem label="&cardwizard.managed;" value="managedCard"/>
        <menuitem label="OpenID" value="openid"/>
      </menupopup>
    </menulist>
  </wizardpage>

  <wizardpage description="&cardwizard.carddetails;" pageid="selfAsserted" onpageadvanced="selfAssertedCallback();">
     <script>
     function selfAssertedCallback() {

         var callbackdata = {};
         callbackdata["type"] = "selfAsserted";
         callbackdata["cardName"] = document.getElementById("cardname").value;
         callbackdata["givenname"] = document.getElementById("givenname").value;
         callbackdata["surname"] = document.getElementById("surname").value;
         callbackdata["email"] = document.getElementById("email").value;
         callbackdata["streetAddress"] = document.getElementById("streetAddress").value;
         callbackdata["locality"] = document.getElementById("locality").value;
         callbackdata["stateOrProvince"] = document.getElementById("stateOrProvince").value;
         callbackdata["postalCode"] = document.getElementById("postalCode").value;
         callbackdata["country"] = document.getElementById("country").value;
         callbackdata["primaryPhone"] = document.getElementById("primaryPhone").value;
         callbackdata["otherPhone"] = document.getElementById("otherPhone").value;
         callbackdata["mobilePhone"] = document.getElementById("mobilePhone").value;
         callbackdata["dateOfBirth"] = document.getElementById("dateOfBirth").value;
         callbackdata["gender"] = document.getElementById("gender").value;
         callbackdata["imgurl"] = document.getElementById("imgurl").value;

         window.arguments[1](callbackdata);

         document.getElementById('card-window').cancel();


     }
     </script>
    <label value="&cardwizard.selfasserted;"/>
      <vbox id="editarea" flex="1">
        <grid>
            <columns><column id="colText"/><column id="colData"/></columns>
            <rows>
                <row><label class="lblText" value="&cardmanager.cardname;"   /><textbox id="cardname"    value=""/></row>
                <row><label class="lblText" value="&cardmanager.givenname;"   /><textbox id="givenname"    value=""/></row>
                <row><label class="lblText" value="&cardmanager.surname;"  /><textbox id="surname"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.email;"  /><textbox id="email"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.streetaddress;"  /><textbox id="streetAddress"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.locality;"  /><textbox id="locality"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.stateorprovince;"  /><textbox id="stateOrProvince"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.postalcode;"  /><textbox id="postalCode"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.country;"  /><textbox id="country"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.primaryphone;"  /><textbox id="primaryPhone"   value=""/></row>
                <row><label class="lblText" value="&cardmanager.mobilephone;" /><textbox id="mobilePhone"  value=""/></row>
                <row><label class="lblText" value="&cardmanager.otherphone;"    /><textbox id="otherPhone"     value=""/></row>
                <row><label class="lblText" value="&cardmanager.dateofbirth;"    /><textbox id="dateOfBirth"     value=""/></row>
                <row><label class="lblText" value="&cardmanager.gender;"    /><textbox id="gender"     value=""/></row>
                <row><label class="lblText" value="&cardmanager.imgurl;"    /><textbox id="imgurl"     value=""/></row>
            </rows>
        </grid>
    </vbox>
  </wizardpage>


  <wizardpage description="&cardwizard.carddetails;" pageid="managedCard" onpageadvanced="parseCard(theData);">

      <script>


         var theCard = "";
         var theFile;
          var theData;

         function pickFile() {

          var textbox = document.getElementById("cardfile");
            var button = document.getElementById('cardbutton');
            textbox.thefile = null;

           netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
           var nsIFilePicker = Components.interfaces.nsIFilePicker;
           var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
           fp.init(window, "Select a File", nsIFilePicker.modeOpen);
           fp.appendFilters( nsIFilePicker.filterAll );
           var res = fp.show();
           if (res == nsIFilePicker.returnOK) {
             textbox.thefile = fp.file;
             theData = getFile(fp.file);
             theFile = fp.file;
             textbox.value = textbox.thefile.path;
           } else {
             textbox.thefile = null;
             textbox.value = "";
           }

          theCard = textbox.value;
         }


         function getFile(file) {


             if (file != null) {

                 netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                 var is = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance( Components.interfaces.nsIFileInputStream );
                 var sstream = Components.classes["@mozilla.org/scriptableinputstream;1"].createInstance(Components.interfaces.nsIScriptableInputStream);

                 is.init( file, 0x01, 00004, null);
                 sstream.init(is);
                 var data = "";
                 var count = 0;

                 while (sstream.available() > 0) {
                       count = sstream.available();
                       if (count > 2048) {
                         count = 2048;
                       }
                       data += sstream.read(count);
                 }

                 var stop;
				 while ((stop = data.indexOf("?>")) > 0) {
				  debug("import managed card: removing processing instructions" + stop);
				  var newData = data.substring(stop+2);
				  data = newData;
				  debug("import managed card: " + data);
				 }
			     debug("Import managed card: " + data);
                 return data;
             } else {
                return "";
             }

          }


          function parseCard(cardData) {
 		     debug("parseCard: " + cardData);

             var cardxml = new XML(cardData);
             var dsig = new Namespace("dsig", "http://www.w3.org/2000/09/xmldsig#");
             var ic = new Namespace("ic", "http://schemas.xmlsoap.org/ws/2005/05/identity");
             var wsid = new Namespace("wsid", "http://schemas.xmlsoap.org/ws/2006/02/addressingidentity");
             var wsa = new Namespace("wsa", "http://www.w3.org/2005/08/addressing");
             var mex = new Namespace("mex", "http://schemas.xmlsoap.org/ws/2004/09/mex");
             var wss = new Namespace("wss", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");

// the following line does not work with the openidcards.sxip.com cards. It works down to the mexReference but failes to retrieve the address
//             var mexEP =    cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.wsa::EndpointReference.wsa::Metadata.mex::Metadata.mex::MetadataSection.mex::MetadataReference.wsa::Address;

             var tokenservice =    cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService;
             //debug("tokenservice:" + tokenservice.toXMLString());
             var epr = tokenservice.wsa::EndpointReference;
             //debug("EndpointReference:" + epr.toXMLString());
             var mexOuter = epr.wsa::Metadata;
             //debug("outer Metadata:" + mexOuter.toXMLString());
             var mexInner = mexOuter.mex::Metadata;
             //debug("inner Metadata:" + mexInner.toXMLString());
             var mexSection = mexInner.mex::MetadataSection;
             //debug("MetadataSection:" + mexSection.toXMLString());
             var mexReference = mexSection.mex::MetadataReference;
             //debug("MetadataReference: " + mexReference.toXMLString());
             var mexEP = mexReference.wsa::Address; // this does not work with the sxip openidinfocards
             debug("mexAddress: " + mexEP.toXMLString());
             if (mexEP == undefined) {
                var address = "" + mexReference.toString() + "";
                var ia = address.indexOf("Address");
                if (ia > 0) {
                	var lt = String.fromCharCode(60); 
                	ia += "Address".length+1;
                	address = address.substring(ia);
                	var ib = address.indexOf(lt);
                	address = address.substring(0, ib);
                	debug("address:" + address);
                	mexEP = address;
                } else {
                	alert("Could not find Metadata Address in imported card");
		            window.arguments[1](null);
	                document.getElementById('card-window').cancel();
                	return;
                }
             }

             var cardId = cardxml.dsig::Object.ic::InformationCard.ic::InformationCardReference.ic::CardId;
             var cardVersion = cardxml.dsig::Object.ic::InformationCard.ic::InformationCardReference.ic::CardVersion;
             var cardName = cardxml.dsig::Object.ic::InformationCard.ic::CardName;
             var cardImage = cardxml.dsig::Object.ic::InformationCard.ic::CardImage;
             var issuer = cardxml.dsig::Object.ic::InformationCard.ic::Issuer;
			 var stsCert = cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.wsa::EndpointReference.wsid::Identity.dsig::KeyInfo.dsig::X509Data.dsig::X509Certificate;

			 var supportedTokenTypeList = cardxml.dsig::Object.ic::InformationCard.ic::SupportedTokenTypeList;

			 var cardUserCredential = cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.ic::UserCredential.toXMLString();
//             var cardHint =    cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.ic::UserCredential.ic::DisplayCredentialHint;
//             var cardUid =    cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.ic::UserCredential.ic::UsernamePasswordCredential.ic::Username;
//             var cardKeyIdentifier = cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.ic::UserCredential.ic::X509V3Credential.dsig::X509Data.wss::KeyIdentifier;
//             var cardPrivatePersonalIdentifier = cardxml.dsig::Object.ic::InformationCard.ic::TokenServiceList.ic::TokenService.ic::UserCredential.ic::SelfIssuedCredential.dsig::PrivatePersonalIdentifier;
			 var requireAppliesTo = cardxml.dsig::Object.ic::InformationCard.ic::RequireAppliesTo;
			 
              debug(cardId);
              debug(cardName);
              debug(issuer);
              debug(mexEP);
//              debug(cardHint);
//              debug(cardUid);
//			  debug(cardKeyIdentifier);
//			  debug(cardPrivatePersonalIdentifier);
			  debug(cardUserCredential);
			  debug(stsCert);
			  debug("requireAppliesTo:" + requireAppliesTo);
			  debug("SupportedTokenTypeList:"+ supportedTokenTypeList);
			  
              var callbackdata = {};
              callbackdata["type"] = "managedCard";
              callbackdata["cardId"] = cardId;
              callbackdata["cardVersion"] = cardVersion;
              callbackdata["cardName"] = cardName;
              callbackdata["cardImage"] = cardImage;
              callbackdata["issuer"] = issuer;
              callbackdata["mex"] = mexEP;
//              callbackdata["hint"] = cardHint;
//              callbackdata["uid"] = cardUid;
//              callbackdata["KeyIdentifier"] = cardKeyIdentifier;
//              callbackdata["PrivatePersonalIdentifier"] = cardPrivatePersonalIdentifier;
			  callbackdata["usercredential"] = cardUserCredential;
              callbackdata["stsCert"] = stsCert;
              callbackdata["supportedClaims"] = cardxml.dsig::Object.ic::InformationCard.ic::SupportedClaimTypeList.toXMLString();
              callbackdata["supportedTokenTypeList"] = supportedTokenTypeList.toXMLString();
              if (requireAppliesTo == null) {
	              callbackdata["requireAppliesTo"] = requireAppliesTo;
              }
              
              window.arguments[1](callbackdata);

               document.getElementById('card-window').cancel();


          }




      </script>

      <label value="Please load your managed card:"/>

      <textbox id="cardfile"/>
      <button label="Select a Card..." id="cardbutton" oncommand="pickFile();"/>




  </wizardpage>


    <wizardpage description="&cardwizard.carddetails;" pageid="openid" onpageadvanced="openidCallback();">
       <script>
       function openidCallback() {

           var callbackdata = {};
           callbackdata["type"] = "openid";
           callbackdata["openid_url"] = document.getElementById("openid_url").value;
           callbackdata["cardName"] = document.getElementById("openid_url").value;
           callbackdata["cardId"] = document.getElementById("openid_url").value;
           window.arguments[1](callbackdata);

           document.getElementById('card-window').cancel();

       }
       </script>
        <vbox id="editarea" flex="1">
          <grid>
              <columns><column id="colText"/><column id="colData"/></columns>
              <rows>
                  <row><label class="lblText" value="OpenID URL:"   /><textbox id="openid_url"  value=""/></row>
              </rows>
          </grid>
      </vbox>
    </wizardpage>



</wizard>
