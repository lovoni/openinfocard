/*
 * Copyright (c) 2006, Chuck Mortimore - xmldap.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the names xmldap, xmldap.org, xmldap.com nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.xmldap.infocard;

import nu.xom.Attribute;
import nu.xom.Element;
import org.xmldap.exceptions.InfoCardProcessingException;
import org.xmldap.exceptions.KeyStoreException;
import org.xmldap.exceptions.SerializationException;
import org.xmldap.exceptions.SigningException;
import org.xmldap.infocard.policy.SupportedClaim;
import org.xmldap.infocard.policy.SupportedClaimList;
import org.xmldap.infocard.policy.SupportedToken;
import org.xmldap.infocard.policy.SupportedTokenList;
import org.xmldap.util.KeystoreUtil;
import org.xmldap.util.XSDDateTime;
import org.xmldap.ws.WSConstants;
import org.xmldap.xmldsig.InfoCardSignature;

import java.security.PrivateKey;
import java.security.cert.X509Certificate;

/**
 * InfoCard allows you to create an InfoCard, and serialize to XML.
 *
 * Almost works...
 *
 * @author charliemortimore at gmail.com
 */
public class InfoCard {


    private X509Certificate cert;
    private PrivateKey privateKey;
    private String cardName;
    private String cardId;
    private int cardVersion = 1;
    private String base64BinaryCardImage;
    private String issuer;
    private String issuerName;
    private String timeIssued;
    private String timeExpires;
    private String privacyPolicy;
    private TokenServiceReference tokenServiceReference;
    private SupportedTokenList tokenList;
    private SupportedClaimList claimList;
    private String userName;
    private boolean requireAppliesTo = false;

    public InfoCard(X509Certificate cert, PrivateKey privateKey) {
        this.cert = cert;
        this.privateKey = privateKey;
    }

    public void setRequireAppliesTo(boolean requireAppliesTo) {
        this.requireAppliesTo = requireAppliesTo;
    }

    public String getIssuer() {
        return issuer;
    }

    public void setIssuer(String issuer) {
        this.issuer = issuer;
    }

    public String getPrivacyPolicy() {
        return privacyPolicy;
    }

    public void setPrivacyPolicy(String privacyPolicy) {
        this.privacyPolicy = privacyPolicy;
    }


    public String getCardName() {
        return cardName;
    }

    public void setCardName(String cardName) {
        this.cardName = cardName;
    }

    public String getCardId() {
        return cardId;
    }

    public void setCardId(String cardId) {
        this.cardId = cardId;
    }

    public int getCardVersion() {
        return cardVersion;
    }

    public void setCardVersion(int cardVersion) {
        this.cardVersion = cardVersion;
    }

    public String getBase64BinaryCardImage() {
        return base64BinaryCardImage;
    }

    public void setBase64BinaryCardImage(String base64BinaryCardImage) {
        this.base64BinaryCardImage = base64BinaryCardImage;
    }

    public String getIssuerName() {
        return issuerName;
    }

    public void setIssuerName(String issuerName) {
        this.issuerName = issuerName;
    }

    public String getTimeIssued() {
        return timeIssued;
    }

    public void setTimeIssued(String timeIssued) {
        this.timeIssued = timeIssued;
    }

    public String getTimeExpires() {
        return timeExpires;
    }

    public void setTimeExpires(String timeExpires) {
        this.timeExpires = timeExpires;
    }

    public TokenServiceReference getTokenServiceReference() {
        return tokenServiceReference;
    }

    public void setTokenServiceReference(TokenServiceReference tokenServiceReference) {
        this.tokenServiceReference = tokenServiceReference;
    }

    public SupportedTokenList getTokenList() {
        return tokenList;
    }

    public void setTokenList(SupportedTokenList tokenList) {
        this.tokenList = tokenList;
    }

    public SupportedClaimList getClaimList() {
        return claimList;
    }

    public void setClaimList(SupportedClaimList claimList) {
        this.claimList = claimList;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }


    public String getInfoCard() throws InfoCardProcessingException {

        Element infoCard = new Element(WSConstants.INFOCARD_PREFIX + ":InformationCard", WSConstants.INFOCARD_NAMESPACE);
        Attribute lang = new Attribute("xml:lang", "http://www.w3.org/XML/1998/namespace", "en-us");
        infoCard.addAttribute(lang);
        infoCard.addNamespaceDeclaration(WSConstants.MEX_PREFIX,WSConstants.MEX_04_09);
        infoCard.addNamespaceDeclaration(WSConstants.DSIG_PREFIX,WSConstants.DSIG_NAMESPACE);
        infoCard.addNamespaceDeclaration(WSConstants.INFOCARD_PREFIX, WSConstants.INFOCARD_NAMESPACE);
        infoCard.addNamespaceDeclaration(WSConstants.WSA_PREFIX,WSConstants.WSA_NAMESPACE_05_08);
        infoCard.addNamespaceDeclaration(WSConstants.WSA_ID_PREFIX,WSConstants.WSA_ID_06_02);
        infoCard.addNamespaceDeclaration(WSConstants.TRUST_PREFIX,WSConstants.TRUST_NAMESPACE_05_02);


        Element infoCardReference = new Element(WSConstants.INFOCARD_PREFIX + ":InformationCardReference", WSConstants.INFOCARD_NAMESPACE);
        Element cardIdElm = new Element(WSConstants.INFOCARD_PREFIX + ":CardId", WSConstants.INFOCARD_NAMESPACE);
        cardIdElm.appendChild(cardId);
        infoCardReference.appendChild(cardIdElm);
        Element cardVersionElm = new Element(WSConstants.INFOCARD_PREFIX + ":CardVersion", WSConstants.INFOCARD_NAMESPACE);
        Integer ver = new Integer(cardVersion);
        cardVersionElm.appendChild(ver.toString());
        infoCardReference.appendChild(cardVersionElm);
        infoCard.appendChild(infoCardReference);

        Element cardNameElm = new Element(WSConstants.INFOCARD_PREFIX + ":CardName", WSConstants.INFOCARD_NAMESPACE);
        cardNameElm.appendChild(cardName);
        infoCard.appendChild(cardNameElm);


        Element cardImageElm = new Element(WSConstants.INFOCARD_PREFIX + ":CardImage", WSConstants.INFOCARD_NAMESPACE);
        cardImageElm.appendChild("");
        Attribute mime = new Attribute("MimeType", "image/png");
        cardImageElm.addAttribute(mime);
        infoCard.appendChild(cardImageElm);

        Element issuerElm = new Element(WSConstants.INFOCARD_PREFIX + ":Issuer", WSConstants.INFOCARD_NAMESPACE);
        issuerElm.appendChild(issuer);
        infoCard.appendChild(issuerElm);

        Element issuerNameElm = new Element(WSConstants.INFOCARD_PREFIX + ":IssuerName", WSConstants.INFOCARD_NAMESPACE);
        issuerNameElm.appendChild(issuerName);
        //TODO - Remove this for RC1
        //infoCard.appendChild(issuerNameElm);

        Element timeIssuedElm = new Element(WSConstants.INFOCARD_PREFIX + ":TimeIssued", WSConstants.INFOCARD_NAMESPACE);
        timeIssuedElm.appendChild(timeIssued);
        //timeIssuedElm.appendChild("2006-09-04T19:39:19.6053152Z");
        infoCard.appendChild(timeIssuedElm);

        Element timeExpiresElm = new Element(WSConstants.INFOCARD_PREFIX + ":TimeExpires", WSConstants.INFOCARD_NAMESPACE);
        //timeExpiresElm.appendChild(timeExpires);
        timeExpiresElm.appendChild("9999-12-31T23:59:59.9999999Z");
        infoCard.appendChild(timeExpiresElm);



        try {
            infoCard.appendChild(tokenServiceReference.serialize());
            infoCard.appendChild(tokenList.serialize());
            infoCard.appendChild(claimList.serialize());
        } catch (SerializationException e) {
            throw new InfoCardProcessingException(e);
        }
        //TODO - RC1 change
        Element ppElm = new Element(WSConstants.INFOCARD_PREFIX + ":PrivacyNotice", WSConstants.INFOCARD_NAMESPACE);
        //Element ppElm = new Element(WSConstants.INFOCARD_PREFIX + ":PrivacyNoticeAt", WSConstants.INFOCARD_NAMESPACE);
        ppElm.appendChild(privacyPolicy);
        infoCard.appendChild(ppElm);

        if (requireAppliesTo) {

            Element requireAppliesToElm = new Element(WSConstants.INFOCARD_PREFIX + ":RequireAppliesTo", WSConstants.INFOCARD_NAMESPACE);
            infoCard.appendChild(requireAppliesToElm);

        }

        //Get the signing util
        InfoCardSignature signer = new InfoCardSignature(cert,privateKey);

        String signedCardXML = null;

        try {

            Element signedCard = signer.sign(infoCard);
            signedCardXML = signedCard.toXML();
        } catch (SigningException e) {
            throw new InfoCardProcessingException(e);
        }

        return signedCardXML;

    }

    /*

    public static void main(String[] args) {

        //Get my keystore
        KeystoreUtil keystore = null;
        try {
            keystore = new KeystoreUtil("/Users/cmort/build/infocard/conf/xmldap_org.jks", "password");
        } catch (KeyStoreException e) {
            e.printStackTrace();
        }

        X509Certificate cert = null;
        try {
            cert = keystore.getCertificate("xmldap");
        } catch (KeyStoreException e) {
            e.printStackTrace();
        }

        PrivateKey pKey = null;
        try {
            pKey = keystore.getPrivateKey("xmldap", "password");
        } catch (KeyStoreException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }


        InfoCard card = new InfoCard(cert, pKey);
        card.setCardId("https://xmldap.org/cards/123456");
        card.setCardName("Custom card");
        card.setCardVersion(1);
        card.setIssuerName("xmldap.org");
        //card.setIssuer("http://xmldap.org/jaxws-sts/sts");
        card.setIssuer("http://xmldap.org/");
        XSDDateTime issued = new XSDDateTime();
        XSDDateTime expires = new XSDDateTime(525600);

        card.setTimeIssued(issued.getDateTime());
        card.setTimeExpires(expires.getDateTime());

        TokenServiceReference tsr = new TokenServiceReference("http://xmldap.org/sts/tokenservice", "https://xmldap.org/sts/mex", cert);
        //TokenServiceReference tsr = new TokenServiceReference("http://xmldap.org/jaxws-sts/sts", "https://xmldap.org/sts/mex", cert);
        //TokenServiceReference tsr = new TokenServiceReference("http://localhost:8080/jaxws-sts/sts", "https://xmldap.org/sts/mex", cert);
        //TokenServiceReference tsr = new TokenServiceReference("https://www.fabrikam.com:7000/sample/trust/usernamepassword/sts", "https://www.fabrikam.com:7001/sample/trust/usernamepassword/mex", cert);
        tsr.setUserName("cmort");
        card.setTokenServiceReference(tsr);


        SupportedTokenList tokenList = new SupportedTokenList();
        SupportedToken token = new SupportedToken(SupportedToken.SAML11);
        tokenList.addSupportedToken(token);
        card.setTokenList(tokenList);

        SupportedClaimList claimList = new SupportedClaimList();
        //SupportedClaim given = new SupportedClaim("GivenName", "http://schemas.microsoft.com/ws/2005/05/identity/claims/givenname");
        //SupportedClaim sur = new SupportedClaim("Surname", "http://schemas.microsoft.com/ws/2005/05/identity/claims/surname");
        //SupportedClaim email = new SupportedClaim("EmailAddress", "http://schemas.microsoft.com/ws/2005/05/identity/claims/emailaddress");
        //SupportedClaim ppid = new SupportedClaim("PPID", "http://schemas.microsoft.com/ws/2005/05/identity/claims/privatepersonalidentifier");
        SupportedClaim given = new SupportedClaim("GivenName", "http://schemas.microsoft.com/ws/2005/05/identity/claims/givenname");
        SupportedClaim sur = new SupportedClaim("Surname", "http://schemas.microsoft.com/ws/2005/05/identity/claims/surname");
        SupportedClaim email = new SupportedClaim("EmailAddress", "http://schemas.microsoft.com/ws/2005/05/identity/claims/emailaddress");
        SupportedClaim ppid = new SupportedClaim("PPID", "http://schemas.microsoft.com/ws/2005/05/identity/claims/privatepersonalidentifier");
        claimList.addSupportedClaim(given);
        claimList.addSupportedClaim(sur);
        claimList.addSupportedClaim(email);
        claimList.addSupportedClaim(ppid);
        card.setClaimList(claimList);

        card.setPrivacyPolicy("https://xmldap.org/PrivacyPolicy.xml");

        try {
            System.out.println(card.getInfoCard());
        } catch (InfoCardProcessingException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }




    }
    */

}
